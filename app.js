// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
const tg = window.Telegram.WebApp;
tg.expand();

// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
document.documentElement.style.setProperty('--tg-theme-bg-color', tg.backgroundColor);
document.documentElement.style.setProperty('--tg-theme-text-color', tg.textColor);
document.documentElement.style.setProperty('--tg-theme-button-color', tg.buttonColor);
document.documentElement.style.setProperty('--tg-theme-button-text-color', tg.buttonTextColor);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase
if (!window.supabase) {
    console.error('Supabase is not loaded');
    tg.showAlert('–û—à–∏–±–∫–∞: Supabase –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
    throw new Error('Supabase is not loaded');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabaseUrl = 'https://bsivriajgsginlnuyxny.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJzaXZyaWFqZ3NnaW5sbnV5eG55Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzYxNjg2OTcsImV4cCI6MjA1MTc0NDY5N30.UJ6L73nUg7U4pgULc57clsY4OygSYeeJk8mv_DekZtw';

console.log('Initializing Supabase client...');
const supabase = window.supabase.createClient(supabaseUrl, supabaseKey, {
    auth: {
        autoRefreshToken: true,
        persistSession: true
    }
});
console.log('Supabase client initialized:', supabase);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase
async function checkSupabaseConnection() {
    try {
        const { data, error } = await supabase.from('posts').select('count').limit(1);
        if (error) throw error;
        console.log('Supabase connection successful');
        return true;
    } catch (error) {
        console.error('Supabase connection error:', error);
        tg.showAlert(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: ${error.message}`);
        return false;
    }
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let currentPage = 1;
const postsPerPage = 10;
let isLoading = false;

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const feedScreen = document.getElementById('feed-screen');
const trendsScreen = document.getElementById('trends-screen');
const postsContainer = document.getElementById('posts-feed');
const loadMoreBtn = document.getElementById('load-more');
const navLinks = document.querySelectorAll('.nav-link');
const photoModal = document.querySelector('.photo-modal');
const photoModalImage = document.querySelector('.photo-modal-image');
const photoModalClose = document.querySelector('.photo-modal-close');

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
function openPhotoModal(imageUrl) {
    photoModalImage.src = imageUrl;
    photoModal.classList.add('active');
    document.body.style.overflow = 'hidden';
    tg.HapticFeedback.impactOccurred('light');
}

function closePhotoModal() {
    photoModal.classList.remove('active');
    document.body.style.overflow = '';
    tg.HapticFeedback.impactOccurred('light');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
photoModalClose.addEventListener('click', closePhotoModal);
photoModal.addEventListener('click', (e) => {
    if (e.target === photoModal || e.target === photoModal.querySelector('.photo-modal-content')) {
        closePhotoModal();
    }
});
photoModalImage.addEventListener('click', (e) => {
    e.stopPropagation();
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
navLinks.forEach(link => {
    link.addEventListener('click', () => {
        const screen = link.dataset.screen;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        navLinks.forEach(l => l.classList.remove('active'));
        link.classList.add('active');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
        document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
        document.getElementById(`${screen}-screen`).classList.add('active');

        // –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram –æ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏
        tg.HapticFeedback.impactOccurred('light');
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
function parsePhotoLinks(photoLinksStr) {
    if (!photoLinksStr) return [];
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ "https://"
    const parts = photoLinksStr.split('https://');
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–∏
    return parts
        .filter(part => part.trim()) // —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —á–∞—Å—Ç–∏
        .map(part => {
            // –£–¥–∞–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
            part = part.replace(/,\s*$/, '');
            // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ "https://"
            const nextHttpsIndex = part.indexOf('https://');
            if (nextHttpsIndex !== -1) {
                // –ï—Å–ª–∏ –Ω–∞—à–ª–∏, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–æ –Ω–µ–≥–æ
                part = part.substring(0, nextHttpsIndex);
            }
            return 'https://' + part.trim();
        });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
function formatText(text, maxLength = 150) {
    if (!text) return '';
    
    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—á–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (text.length <= maxLength) {
        return text.split('\n').map(line => line.trim()).join('<br>');
    }
    
    return `
        <div class="post-text-content">
            ${text.split('\n').map(line => line.trim()).join('<br>')}
            <div class="text-expand">–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë</div>
        </div>
    `;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏
async function loadTrendingPosts() {
    try {
        const { data: posts, error } = await supabase
            .from('posts')
            .select('*')
            .order('views', { ascending: false })
            .limit(3);

        if (error) {
            console.error('Supabase error:', error);
            tg.showAlert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: ${error.message}`);
            return;
        }

        if (!posts || posts.length === 0) {
            console.log('No trending posts found');
            document.querySelector('.banner-carousel').style.display = 'none';
            return;
        }

        const carouselInner = document.querySelector('.carousel-inner');
        carouselInner.innerHTML = posts.map((post, index) => {
            const photoLinks = parsePhotoLinks(post.photo_links);
            const photoUrl = photoLinks[0] || '';
            const lines = post.text?.split('\n') || [];
            const title = lines[0] || 'Trending post';
            
            return `
                <div class="carousel-item ${index === 0 ? 'active' : ''}" 
                     style="background-image: url('${photoUrl}')">
                    <div class="carousel-caption">
                        <h5>${title}</h5>
                        <div class="post-stats">
                            <span class="post-stat">üëÅ ${post.views || 0}</span>
                            <span class="post-stat">‚ù§Ô∏è ${post.likes || 0}</span>
                        </div>
                    </div>
                </div>
            `;
        }).join('');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—É—Å–µ–ª—å
        document.querySelector('.banner-carousel').style.display = 'block';

    } catch (error) {
        console.error('Error loading trending posts:', error);
        tg.showAlert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: ${error.message}`);
        document.querySelector('.banner-carousel').style.display = 'none';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ—Å—Ç–∞
async function loadCommentsForPost(postId, groupId) {
    try {
        console.log('Loading comments for:', { postId, groupId }); // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ comments_vk
        const { data: sampleComments, error: sampleError } = await supabase
            .from('comments_vk')
            .select('*')
            .limit(1);
        
        console.log('Sample comment structure:', sampleComments); // –°–º–æ—Ç—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è

        const { data: comments, error } = await supabase
            .from('comments_vk')
            .select('*')
            .eq('group_id', groupId)
            .eq('post_id', postId)
            .order('likes', { ascending: false })
            .limit(5);

        if (error) {
            console.error('Error loading comments:', error);
            return [];
        }

        console.log(`Comments for post ${postId} from group ${groupId}:`, comments); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return comments || [];
    } catch (error) {
        console.error('Error:', error);
        return [];
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ª–µ–Ω—Ç—ã
async function loadPosts() {
    if (isLoading) return;
    isLoading = true;
    loadMoreBtn.style.display = 'none';
    loadMoreBtn.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';

    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
        const { count } = await supabase
            .from('posts')
            .select('*', { count: 'exact', head: true });

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–æ–≤
        const { data: posts, error } = await supabase
            .from('posts')
            .select('*')
            .order('post_datetime', { ascending: false })
            .range((currentPage - 1) * postsPerPage, (currentPage * postsPerPage) - 1);

        if (error) {
            console.error('Supabase error:', error);
            tg.showAlert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤: ${error.message}`);
            return;
        }

        if (!posts || posts.length === 0) {
            if (currentPage === 1) {
                postsContainer.innerHTML = '<div class="text-center mt-4">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤</div>';
            }
            return;
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç
        for (const post of posts) {
            console.log('Post data:', {
                id: post.id,
                post_id: post.post_id,
                group_id: post.group_id,
                // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è –ø–æ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                ...post
            });

            const photoLinks = parsePhotoLinks(post.photo_links);
            const postElement = document.createElement('div');
            postElement.className = 'post';
            
            const lines = post.text?.split('\n') || [];
            const title = lines[0] || '';
            const text = lines.slice(1).join('\n') || '';

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞
            const comments = await loadCommentsForPost(post.post_id, post.group_id);
            console.log('Comments loaded:', comments); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

            const commentsHtml = comments.length > 0 
                ? `
                    <div class="post-comments">
                        <div class="comments-header">
                            <div class="comments-header-left">
                                <span class="comments-icon">üí¨</span>
                                <span class="comments-title">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ VK</span>
                            </div>
                        </div>
                        ${comments[0] ? `
                            <div class="comment">
                                <div class="comment-avatar">üë§</div>
                                <div class="comment-content">
                                    <div class="comment-text">${comments[0].text || ''}</div>
                                    <div class="comment-likes">‚ù§Ô∏è ${comments[0].likes || 0}</div>
                                </div>
                            </div>
                        ` : ''}
                        ${comments.length > 1 ? `
                            <div class="comments-expand" style="display: flex; align-items: center; justify-content: space-between; padding: 8px 0; cursor: pointer;">
                                <span>–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë ${comments.length - 1} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</span>
                                <span class="comments-toggle">‚ñº</span>
                            </div>
                            <div class="comments-list collapsed" style="max-height: 0;">
                                ${comments.slice(1).map(comment => `
                                    <div class="comment">
                                        <div class="comment-avatar">üë§</div>
                                        <div class="comment-content">
                                            <div class="comment-text">${comment.text || ''}</div>
                                            <div class="comment-likes">‚ù§Ô∏è ${comment.likes || 0}</div>
                                        </div>
                                    </div>
                                `).join('')}
                            </div>
                        ` : ''}
                    </div>
                `
                : '';

            postElement.innerHTML = `
                <div class="post-header">
                    <h2 class="post-title">${title}</h2>
                    <div class="post-text">${formatText(text)}</div>
                </div>
                ${photoLinks.length > 0 ? `
                    <div class="post-photos ${photoLinks.length === 1 ? 'single' : 'multiple'}">
                        ${photoLinks.map(url => `
                            <img src="${url}" class="post-photo" alt="Post image" loading="lazy" onerror="this.style.display='none'">
                        `).join('')}
                    </div>
                ` : ''}
                <div class="post-footer">
                    <span class="post-stat">üëÅ ${post.views || 0}</span>
                    <span class="post-stat">‚ù§Ô∏è ${post.likes || 0}</span>
                    <span class="post-stat">üí¨ ${post.comments || 0}</span>
                    <span class="post-stat">üîÑ ${post.reposts || 0}</span>
                </div>
                ${commentsHtml}
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ
            const photos = postElement.querySelectorAll('.post-photo');
            photos.forEach(photo => {
                photo.addEventListener('click', () => {
                    openPhotoModal(photo.src);
                });
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            const commentsExpand = postElement.querySelector('.comments-expand');
            const commentsList = postElement.querySelector('.comments-list');
            const commentsToggle = postElement.querySelector('.comments-toggle');
            
            if (commentsExpand && commentsList && commentsToggle) {
                commentsExpand.addEventListener('click', () => {
                    const isExpanded = !commentsList.classList.contains('collapsed');
                    
                    if (isExpanded) {
                        commentsList.style.maxHeight = '0';
                        commentsList.classList.add('collapsed');
                        commentsToggle.style.transform = 'rotate(0deg)';
                        commentsExpand.querySelector('span:first-child').textContent = 
                            `–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë ${comments.length - 1} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`;
                    } else {
                        commentsList.style.maxHeight = `${commentsList.scrollHeight}px`;
                        commentsList.classList.remove('collapsed');
                        commentsToggle.style.transform = 'rotate(180deg)';
                        commentsExpand.querySelector('span:first-child').textContent = '–°–∫—Ä—ã—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏';
                    }
                    
                    tg.HapticFeedback.impactOccurred('light');
                });
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            const textExpand = postElement.querySelector('.text-expand');
            if (textExpand) {
                const textContent = postElement.querySelector('.post-text-content');
                let isExpanded = false;

                textExpand.addEventListener('click', () => {
                    if (!isExpanded) {
                        textContent.style.maxHeight = 'none';
                        textContent.style.webkitLineClamp = 'unset';
                        textExpand.textContent = '–°–∫—Ä—ã—Ç—å';
                        textExpand.classList.add('expanded');
                    } else {
                        textContent.style.maxHeight = '4.5em';
                        textContent.style.webkitLineClamp = '3';
                        textExpand.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë';
                        textExpand.classList.remove('expanded');
                    }
                    isExpanded = !isExpanded;
                    tg.HapticFeedback.impactOccurred('light');
                });
            }

            postsContainer.appendChild(postElement);
        }

        currentPage++;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –ø–æ—Å—Ç—ã
        const hasMorePosts = count > currentPage * postsPerPage;
        loadMoreBtn.style.display = hasMorePosts ? 'block' : 'none';

    } catch (error) {
        console.error('Error loading posts:', error);
        tg.showAlert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤: ${error.message}`);
    } finally {
        isLoading = false;
        loadMoreBtn.textContent = '–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ';
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ"
loadMoreBtn.addEventListener('click', () => {
    loadPosts();
    tg.HapticFeedback.impactOccurred('light');
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', async () => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –ø–æ–¥ Telegram
    document.body.style.backgroundColor = tg.backgroundColor;
    document.body.style.color = tg.textColor;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    const isConnected = await checkSupabaseConnection();
    if (!isConnected) {
        tg.showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        return;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    loadTrendingPosts();
    loadPosts();
}); 