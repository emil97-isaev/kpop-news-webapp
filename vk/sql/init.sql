-- Создаем таблицу для статей
CREATE TABLE articles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    author TEXT NOT NULL,
    date TEXT NOT NULL,
    views INTEGER DEFAULT 0,
    likes INTEGER DEFAULT 0,
    source TEXT NOT NULL,
    original_url TEXT,
    translated_title TEXT,
    translated_content TEXT,
    translation_status TEXT DEFAULT 'pending',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Создаем таблицу для комментариев
CREATE TABLE comments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    article_id BIGINT REFERENCES articles(id) ON DELETE CASCADE,
    author TEXT NOT NULL,
    content TEXT NOT NULL,
    date TEXT NOT NULL,
    likes INTEGER DEFAULT 0,
    dislikes INTEGER DEFAULT 0,
    translated_content TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Создаем индексы
CREATE INDEX idx_articles_source ON articles(source);
CREATE INDEX idx_articles_translation_status ON articles(translation_status);
CREATE INDEX idx_comments_article_id ON comments(article_id);

-- Включаем RLS для обеих таблиц
ALTER TABLE articles ENABLE ROW LEVEL SECURITY;
ALTER TABLE comments ENABLE ROW LEVEL SECURITY;

-- Удаляем старые политики
DROP POLICY IF EXISTS "Allow insert for service role" ON articles;
DROP POLICY IF EXISTS "Allow update for service role" ON articles;
DROP POLICY IF EXISTS "Allow insert comments for service role" ON comments;
DROP POLICY IF EXISTS "Allow update comments for service role" ON comments;

-- Создаем новые политики для articles
CREATE POLICY "Enable all for service role" 
ON articles
TO service_role
USING (true)
WITH CHECK (true);

-- Создаем новые политики для comments
CREATE POLICY "Enable all for service role" 
ON comments
TO service_role
USING (true)
WITH CHECK (true);

-- Разрешаем чтение для аутентифицированных пользователей
CREATE POLICY "Allow read for authenticated users" 
ON articles FOR SELECT 
TO authenticated 
USING (true);

CREATE POLICY "Allow read comments for authenticated users" 
ON comments FOR SELECT 
TO authenticated 
USING (true);

-- Создаем функцию для автоматического обновления updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Создаем триггеры для обновления updated_at
CREATE TRIGGER update_articles_updated_at
    BEFORE UPDATE ON articles
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_comments_updated_at
    BEFORE UPDATE ON comments
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column(); 