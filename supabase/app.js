async function loadPosts() {
    if (isLoading) return;
    isLoading = true;

    try {
        const requestBody = {
            page: currentPage,
            limit: postsPerPage
        };
        console.log('Sending request to Edge function with body:', requestBody);
        
        // –í—ã–∑—ã–≤–∞–µ–º Edge Function
        const response = await fetch('https://bsivriajgsginlnuyxny.supabase.co/functions/v1/get-feed', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${supabaseKey}`,
                'apikey': supabaseKey
            },
            body: JSON.stringify(requestBody),
            mode: 'cors',
            credentials: 'omit'
        });

        console.log('Response status:', response.status);
        console.log('Response headers:', Object.fromEntries(response.headers.entries()));

        if (!response.ok) {
            const errorText = await response.text();
            console.error('Error response:', errorText);
            throw new Error(`HTTP error! status: ${response.status}, body: ${errorText}`);
        }

        const data = await response.json();
        console.log('Received data:', data);

        const { posts, hasMore, total } = data;

        if (!posts || posts.length === 0) {
            if (currentPage === 1) {
                postsContainer.innerHTML = '<div class="text-center mt-4">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤</div>';
            }
            observer.unobserve(observerTarget);
            return;
        }

        // –°–æ–∑–¥–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
        const fragment = document.createDocumentFragment();

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
        for (const post of posts) {
            const postElement = document.createElement('div');
            postElement.className = 'post';
            
            postElement.innerHTML = `
                <div class="post-header">
                    <h2 class="post-title">${post.title}</h2>
                    ${formatText(post.text)}
                </div>
                ${post.photoLinks.length > 0 ? `
                    <div class="post-photos ${post.photoLinks.length === 1 ? 'single' : 'multiple'}">
                        ${post.photoLinks.map(url => `
                            <img src="${url}" class="post-photo" alt="Post image" loading="lazy" onerror="this.style.display='none'">
                        `).join('')}
                    </div>
                ` : ''}
                <div class="post-footer">
                    <span class="post-stat">üëÅ ${post.stats.views}</span>
                    <span class="post-stat">‚ù§Ô∏è ${post.stats.likes}</span>
                    <span class="post-stat">üí¨ ${post.stats.comments}</span>
                    <span class="post-stat">üîÑ ${post.stats.reposts}</span>
                </div>
                ${post.comments.length > 0 ? `
                    <div class="post-comments">
                        <div class="comments-header">
                            <div class="comments-header-left">
                                <span class="comments-icon">üí¨</span>
                                <span class="comments-title">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ VK</span>
                            </div>
                        </div>
                        ${post.comments[0] ? `
                            <div class="comment">
                                <div class="comment-avatar">üë§</div>
                                <div class="comment-content">
                                    <div class="comment-text">${post.comments[0].text}</div>
                                    <div class="comment-likes">‚ù§Ô∏è ${post.comments[0].likes}</div>
                                </div>
                            </div>
                        ` : ''}
                        ${post.comments.length > 1 ? `
                            <div class="comments-expand" style="display: flex; align-items: center; justify-content: space-between; padding: 8px 0; cursor: pointer;">
                                <span>–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë ${post.comments.length - 1} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</span>
                                <span class="comments-toggle">‚ñº</span>
                            </div>
                            <div class="comments-list collapsed" style="max-height: 0;">
                                ${post.comments.slice(1).map(comment => `
                                    <div class="comment">
                                        <div class="comment-avatar">üë§</div>
                                        <div class="comment-content">
                                            <div class="comment-text">${comment.text}</div>
                                            <div class="comment-likes">‚ù§Ô∏è ${comment.likes}</div>
                                        </div>
                                    </div>
                                `).join('')}
                            </div>
                        ` : ''}
                    </div>
                ` : ''}
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ
            const photos = postElement.querySelectorAll('.post-photo');
            photos.forEach(photo => {
                photo.addEventListener('click', () => {
                    openPhotoModal(photo.src);
                });
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            const commentsExpand = postElement.querySelector('.comments-expand');
            const commentsList = postElement.querySelector('.comments-list');
            const commentsToggle = postElement.querySelector('.comments-toggle');
            
            if (commentsExpand && commentsList && commentsToggle) {
                commentsExpand.addEventListener('click', () => {
                    const isExpanded = !commentsList.classList.contains('collapsed');
                    
                    if (isExpanded) {
                        commentsList.style.maxHeight = '0';
                        commentsList.classList.add('collapsed');
                        commentsToggle.style.transform = 'rotate(0deg)';
                        commentsExpand.querySelector('span:first-child').textContent = 
                            `–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë ${post.comments.length - 1} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`;
                    } else {
                        commentsList.style.maxHeight = `${commentsList.scrollHeight}px`;
                        commentsList.classList.remove('collapsed');
                        commentsToggle.style.transform = 'rotate(180deg)';
                        commentsExpand.querySelector('span:first-child').textContent = '–°–∫—Ä—ã—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏';
                    }
                    
                    tg.HapticFeedback.impactOccurred('light');
                });
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            const showMoreBtn = postElement.querySelector('.show-more');
            if (showMoreBtn) {
                showMoreBtn.addEventListener('click', () => {
                    const postText = showMoreBtn.closest('.post-text');
                    const fullText = postText.querySelector('.text-full');
                    
                    fullText.style.display = 'inline';
                    showMoreBtn.style.display = 'none';
                    
                    tg.HapticFeedback.impactOccurred('light');
                });
            }

            fragment.appendChild(postElement);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –æ–¥–Ω–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º
        postsContainer.appendChild(fragment);

        currentPage++;
        
        // –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
        if (!hasMore) {
            observer.unobserve(observerTarget);
        }

    } catch (error) {
        console.error('Error loading posts:', error);
    } finally {
        isLoading = false;
    }
} 